Notes:

- Pin assignments are subject to change depending on the final PCB layout.
  With point to point wiring it won't matter.  The assignments used in the
  prototype were merely the segments in order.

- If we have a common cathode display, the display select lines are active
  low, and the segment lines are active high.

- If we have a common anode display, the display select lines are active
  high, and the segment lines are active low.

- We only drive one segment at a time, so current limiting resistors are
  only needed on the display select lines.

- There are no drive transistors - the displays are driven directly from
  the AVR's output pins, via the limiting resistors.

    1	Vcc
    2	PB0,PCINT8	Piezo input.
    3	PB1		DP
    4	/RESET
    5	PB2,OC0A	Left LED display select
    6	PA7,OC0B	Right LED display select
    7	PA6		g segment
    8	PA5		f segment
    9	PA4		e segment
    10	PA3		d segment
    11	PA2		c segment
    12	PA1		b segment
    13	PA0		a segment
    14	GND


- Power from two AAA batteries.  CR2032 3V lithium cells do not have the
  current drive available to drive the display corectly.

- Use the ATtiny84/V or ATtiny84A.  Both will work down to 1.8V at up to 4MHz.

- The default 1MHz internal clock should be more than sufficient, and
  there's no need for great timing accuracy.  We do handle interrupts at
  about 4kHz, but the AVR seems quite capable of keeping up.

- Power down current for those MCUs is less than 1uA.  My measurements show
  that it is well below that.  It barely moves the needle on the 50uA scale
  on my meter, which 1uA graduations.

- The display is multiplexed with a timer interrupt, and the display
  brightness is changed in the interrupt using PWM mode (change the OCRnx
  value).  We don't have to do this in the interrupt, but it is convenient.

- Including the pin needed for the piezo for tap detection and there is
  only the reset pin vacant.  Not a pin to spare!

- We fit in an Altronics H0320 case (65x60x40mm).
